// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["fullTextSearch", "fullTextIndex"]
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }


// model User {
//   id                                Int             @id @default(autoincrement()) @db.UnsignedInt
//   email                             String          @unique(map: "email") @db.VarChar(255)
//   password                          String          @db.VarChar(255)
//   createdAt                         DateTime        @default(now()) @db.Timestamp(0) @map("created_at")
//   updatedAt                         DateTime        @db.Timestamp(0)  @map("updated_at")
    
    
//   ownerObjects                      Object[]        @relation("Object_ownerUser")
//   foundNoOwnerObjects               Object[]        @relation("Object_noOwnerUser")
//   Person                            Person?
// }

// model Person {
//   id                                Int             @id @default(autoincrement()) @db.UnsignedInt
//   full_name                         String          @db.VarChar(255)
//   nickname                          String          @db.VarChar(255)
//   campus                            String?         @db.VarChar(45)
//   createdAt                         DateTime        @default(now()) @db.Timestamp(0) @map("created_at")
//   updatedAt                         DateTime        @db.Timestamp(0) @map("updated_at")

//   userId                            Int             @unique @db.UnsignedInt @map("user_id")
//   imageId                           Int?            @unique @db.UnsignedInt @map("image_id")


//   user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Person_ibfk_1")
//   image      Image?    @relation(fields: [imageId], references: [id])

//   @@index([userId], map: "user_id")
// }

// model Object {
//   id                                Int             @id @default(autoincrement()) @db.UnsignedInt
//   title                             String          @db.VarChar(255)
//   description                       String?         @db.MediumText
//   location                          String?         @db.VarChar(255)
//   type                              ObjectType
//   status                            ObjectStatus
//   createdAt                         DateTime        @default(now()) @db.Timestamp(0) @map("created_at")
//   updatedAt                         DateTime        @db.Timestamp(0) @map("updated_at")


//   ownerId                           Int?            @db.UnsignedInt @map("owner_id")
//   discovererId                      Int?            @db.UnsignedInt @map("discoverer_id")


//   images                            Image[]         @relation("Image_Object")
//   owner                             User?           @relation("Object_ownerUser", fields: [ownerId], references: [id])
//   discoverer                        User?           @relation("Object_noOwnerUser", fields: [discovererId], references: [id])
//   tags                              TagsOnObjects[]

//   @@index([discovererId], map: "discoverer_id")
//   @@index([ownerId], map: "owner_id")
//   @@fulltext([title, description])
// }

// model Tag {
//   id                                Int             @id @default(autoincrement()) @db.UnsignedInt
//   title                             String          @db.VarChar(255)
//   description                       String?         @db.MediumText

//   objecs                            TagsOnObjects[]

//   @@fulltext([title, description])
// }

// model TagsOnObjects {
//   objectId                          Int            @db.UnsignedInt @map("object_id")
//   tagId                             Int            @db.UnsignedInt @map("tag_id")

//   object                            Object         @relation(fields: [objectId], references: [id])
//   tag                               Tag            @relation(fields: [tagId], references: [id])

//   @@id([objectId, tagId])
// }

// model Image {
//   id                                Int             @id @default(autoincrement()) @db.UnsignedInt
//   source                            String          @db.VarChar(255)
//   use                               ImageUse
                    
//   objectId                          Int?            @db.UnsignedInt @map("object_id")   
//   personId                          Int?            @db.UnsignedInt @map("person_id")

//   object                            Object?         @relation("Image_Object", fields: [objectId], references: [id])
//   person                            Person?
// }

// enum ObjectStatus {
//   ACTIVE
//   FINISHED
// }

// enum ObjectType {
//   FOUND
//   LOST
// }

// enum ImageUse {
//   GENERAL
//   OBJECT
// }







generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                                Int             @id @default(autoincrement())
  ra                                String          @unique(map: "ra") @db.VarChar(255)
  password                          String          @db.VarChar(255)
  createdAt                         DateTime        @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt                         DateTime        @db.Timestamp(0)  @map("updated_at")
    
    
  ownerObjects                      Object[]        @relation("Object_ownerUser")
  foundNoOwnerObjects               Object[]        @relation("Object_noOwnerUser")
  Person                            Person?
}

model Person {
  id                                Int             @id @default(autoincrement())
  full_name                         String          @db.VarChar(255)
  email                             String          @unique(map: "email") @db.VarChar(255)
  campus                            String?         @db.VarChar(45)
  createdAt                         DateTime        @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt                         DateTime        @db.Timestamp(0) @map("updated_at")

  userId                            Int             @unique @map("user_id")
  imageId                           Int?            @unique @map("image_id")


  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Person_ibfk_1")
  image      Image?    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_id")
}

model Object {
  id                                Int             @id @default(autoincrement())
  title                             String          @db.VarChar(255)
  description                       String?
  location                          String?         @db.VarChar(255)
  type                              ObjectType
  status                            ObjectStatus
  createdAt                         DateTime        @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt                         DateTime        @db.Timestamp(0) @map("updated_at")


  ownerId                           Int?            @map("owner_id")
  discovererId                      Int?            @map("discoverer_id")


  images                            Image[]         @relation("Image_Object")
  owner                             User?           @relation("Object_ownerUser", fields: [ownerId], references: [id])
  discoverer                        User?           @relation("Object_noOwnerUser", fields: [discovererId], references: [id])
  tags                              TagsOnObjects[]

  @@index([discovererId], map: "discoverer_id")
  @@index([ownerId], map: "owner_id")
}

model Tag {
  id                                Int             @id @default(autoincrement())
  title                             String          @db.VarChar(255)
  description                       String?

  objecs                            TagsOnObjects[]
}

model TagsOnObjects {
  objectId                          Int            @map("object_id")
  tagId                             Int            @map("tag_id")

  object                            Object         @relation(fields: [objectId], references: [id])
  tag                               Tag            @relation(fields: [tagId], references: [id])

  @@id([objectId, tagId])
}

model Image {
  id                                Int             @id @default(autoincrement())
  source                            String          @db.VarChar(255)
  use                               ImageUse
                    
  objectId                          Int?            @map("object_id")   
  personId                          Int?            @map("person_id")

  object                            Object?         @relation("Image_Object", fields: [objectId], references: [id])
  person                            Person?
}

enum ObjectStatus {
  ACTIVE
  FINISHED
}

enum ObjectType {
  FOUND
  LOST
}

enum ImageUse {
  GENERAL
  OBJECT
}
